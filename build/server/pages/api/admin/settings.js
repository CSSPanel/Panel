"use strict";(()=>{var e={};e.id=411,e.ids=[411],e.modules={429:e=>{e.exports=require("cookie-session")},62418:e=>{e.exports=require("mysql2/promise")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},3511:e=>{e.exports=require("passport")},53686:e=>{e.exports=require("passport-steam")},99648:e=>{e.exports=import("axios")},97564:e=>{e.exports=import("chalk")},97612:e=>{e.exports=import("drizzle-orm")},99089:e=>{e.exports=import("drizzle-orm/mysql-core")},63024:e=>{e.exports=import("drizzle-orm/mysql2")},45616:e=>{e.exports=import("next-connect")},2782:e=>{e.exports=import("steam-api-sdk")},9926:e=>{e.exports=import("zod")},47965:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.r(t),s.d(t,{config:()=>c,default:()=>l,routeModule:()=>d});var a=s(71802),i=s(47153),o=s(56249),n=s(94420),u=e([n]);n=(u.then?(await u)():u)[0];let l=(0,o.l)(n,"default"),c=(0,o.l)(n,"config"),d=new a.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/admin/settings",pathname:"/api/admin/settings",bundlePath:"",filename:""},userland:n});r()}catch(e){r(e)}})},94420:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.r(t),s.d(t,{default:()=>c});var a=s(79173),i=s(6346),o=s(41942),n=s(95867),u=s(51861),l=e([a,i,o,n,u]);[a,i,o,n,u]=l.then?(await l)():l;let c=async(e,t)=>{if(await i.Z.run(e,t),!await (0,o.Z)(e,t,["@web/root","@css/root"],"OR"))return;let{method:s}=e;if(!a.Z)return t.status(500).json({message:"Database not connected"});switch(s){case"GET":{let e=await a.Z.settings.getAll(!1);return t.status(200).json(e)}case"POST":{let s=n.ZP.parse(e.body);return await a.Z.settings.update(s),(0,u.Z)("Settings update",`Admin ${e.user?.displayName} (${e.user?.id}) updated the panel settings`,e.user?.id,"adminActionsDiscordWebhook"),t.status(200).json({message:"Settings updated"})}}};r()}catch(e){r(e)}})},51861:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.d(t,{Z:()=>n});var a=s(79173),i=s(10189),o=e([a,i]);[a,i]=o.then?(await o)():o;let n=async(e,t,s,r="discordWebhook")=>{if(a.Z)try{a.Z.logs.create(e,t,s);let o=await a.Z.settings.getByKey(r,!1);o&&"string"==typeof o&&(0,i.Z)({url:o,embeds:[{title:`**▬▬▬▬▬ [LOG :: ${e}] ▬▬▬▬▬**`,color:5352959,description:t,timestamp:new Date().toISOString()}]})}catch(e){console.error(`Failed to log: ${e}`)}};r()}catch(e){r(e)}})},6346:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.d(t,{Z:()=>c});var a=s(79649),i=s(45616),o=s(429),n=s.n(o),u=e([i]);i=(u.then?(await u)():u)[0];let l=(0,i.default)();l.use(n()({secret:process.env.SESSION_SECRET||"secret",maxAge:10368e6})),l.use(a.Z.initialize()),l.use(a.Z.session());let c=l;r()}catch(e){r(e)}})},79649:(e,t,s)=>{s.d(t,{Z:()=>n});var r=s(3511),a=s.n(r),i=s(53686);a().serializeUser(async(e,t)=>{t(null,e)}),a().deserializeUser(async(e,t)=>{t(null,e)});let o=process.env.DOMAIN||"";o.startsWith("http")||(o=`https://${o}`),a().use(new i.Strategy({returnURL:`${o}/api/auth/return`,realm:`${o}/`,apiKey:process.env.STEAM_API_KEY||""},(e,t,s)=>(t.identifier=e,s(null,t))));let n=a()},41942:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.d(t,{Z:()=>o});var a=s(79173),i=e([a]);a=(i.then?(await i)():i)[0];let o=(e,t,s,r="AND")=>new Promise(async(i,o)=>{if(!a.Z)return t.status(500).json({message:"Database not connected"});if(!e.user)return o(t.status(400).json({success:!1,error:"Protected Route"}));let n=e.user.id,u=await a.Z.admins.getBySteam64(n);if(!u)return o(t.status(401).json({success:!1,error:"Protected Route"}));if(!s)return i(u);let l=null;if("object"==typeof u.flags)l=u.flags;else{let e=await a.Z.adminGroups.getById(u.flags);e&&(l=e.flags)}if(null===l||!("AND"===r?s.every(e=>l.includes(e)):s.some(e=>l.includes(e))))return o(t.status(403).json({success:!1,error:"Protected Route"}));i(u)});r()}catch(e){r(e)}})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[3337],()=>s(47965));module.exports=r})();